# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import auth_service_pb2 as auth__service__pb2


class AuthorizationServiceStub(object):
  """Authorization Service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ValidateOneLoginTokens = channel.unary_unary(
        '/authorization_service.AuthorizationService/ValidateOneLoginTokens',
        request_serializer=auth__service__pb2.In.SerializeToString,
        response_deserializer=auth__service__pb2.Out.FromString,
        )


class AuthorizationServiceServicer(object):
  """Authorization Service definition.
  """

  def ValidateOneLoginTokens(self, request, context):
    """
    Checks whether the OneLogin credentials given are valid by checking them
    against OneLogin.

    If tokens are valid, returns true.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AuthorizationServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ValidateOneLoginTokens': grpc.unary_unary_rpc_method_handler(
          servicer.ValidateOneLoginTokens,
          request_deserializer=auth__service__pb2.In.FromString,
          response_serializer=auth__service__pb2.Out.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'authorization_service.AuthorizationService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
